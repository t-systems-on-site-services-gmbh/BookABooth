package de.tsystems.onsite.bookabooth.domain;

import static de.tsystems.onsite.bookabooth.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ServicePackageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicePackageAllPropertiesEquals(ServicePackage expected, ServicePackage actual) {
        assertServicePackageAutoGeneratedPropertiesEquals(expected, actual);
        assertServicePackageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicePackageAllUpdatablePropertiesEquals(ServicePackage expected, ServicePackage actual) {
        assertServicePackageUpdatableFieldsEquals(expected, actual);
        assertServicePackageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicePackageAutoGeneratedPropertiesEquals(ServicePackage expected, ServicePackage actual) {
        assertThat(expected)
            .as("Verify ServicePackage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicePackageUpdatableFieldsEquals(ServicePackage expected, ServicePackage actual) {
        assertThat(expected)
            .as("Verify ServicePackage relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertServicePackageUpdatableRelationshipsEquals(ServicePackage expected, ServicePackage actual) {
        assertThat(expected)
            .as("Verify ServicePackage relationships")
            .satisfies(e -> assertThat(e.getBooths()).as("check booths").isEqualTo(actual.getBooths()));
    }
}
