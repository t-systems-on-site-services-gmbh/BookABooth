package de.tsystems.onsite.bookabooth.domain;

import static de.tsystems.onsite.bookabooth.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BoothUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUserAllPropertiesEquals(BoothUser expected, BoothUser actual) {
        assertBoothUserAutoGeneratedPropertiesEquals(expected, actual);
        assertBoothUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUserAllUpdatablePropertiesEquals(BoothUser expected, BoothUser actual) {
        assertBoothUserUpdatableFieldsEquals(expected, actual);
        assertBoothUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUserAutoGeneratedPropertiesEquals(BoothUser expected, BoothUser actual) {
        assertThat(expected)
            .as("Verify BoothUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUserUpdatableFieldsEquals(BoothUser expected, BoothUser actual) {
        assertThat(expected)
            .as("Verify BoothUser relevant properties")
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()))
            .satisfies(e -> assertThat(e.getVerificationCode()).as("check verificationCode").isEqualTo(actual.getVerificationCode()))
            .satisfies(
                e ->
                    assertThat(e.getVerified())
                        .as("check verified")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getVerified())
            )
            .satisfies(
                e ->
                    assertThat(e.getLastLogin())
                        .as("check lastLogin")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getLastLogin())
            )
            .satisfies(e -> assertThat(e.getDisabled()).as("check disabled").isEqualTo(actual.getDisabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUserUpdatableRelationshipsEquals(BoothUser expected, BoothUser actual) {
        assertThat(expected)
            .as("Verify BoothUser relationships")
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}
