package de.tsystems.onsite.bookabooth.domain;

import static de.tsystems.onsite.bookabooth.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BoothAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothAllPropertiesEquals(Booth expected, Booth actual) {
        assertBoothAutoGeneratedPropertiesEquals(expected, actual);
        assertBoothAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothAllUpdatablePropertiesEquals(Booth expected, Booth actual) {
        assertBoothUpdatableFieldsEquals(expected, actual);
        assertBoothUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothAutoGeneratedPropertiesEquals(Booth expected, Booth actual) {
        assertThat(expected)
            .as("Verify Booth auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUpdatableFieldsEquals(Booth expected, Booth actual) {
        assertThat(expected)
            .as("Verify Booth relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(
                e ->
                    assertThat(e.getCeilingHeight())
                        .as("check ceilingHeight")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCeilingHeight())
            )
            .satisfies(e -> assertThat(e.getAvailable()).as("check available").isEqualTo(actual.getAvailable()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoothUpdatableRelationshipsEquals(Booth expected, Booth actual) {
        assertThat(expected)
            .as("Verify Booth relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getServicePackages()).as("check servicePackages").isEqualTo(actual.getServicePackages()));
    }
}
